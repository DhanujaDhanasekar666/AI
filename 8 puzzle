import heapq
goal = ((1,2,3),(4,5,6),(7,8,0))
def h(state):  
    dist = 0
    for i in range(3):
        for j in range(3):
            val = state[i][j]
            if val != 0:
                x, y = divmod(val - 1, 3)
                dist += abs(x - i) + abs(y - j)
    return dist
def neighbors(state):
    x, y = [(i,j) for i in range(3) for j in range(3) if state[i][j] == 0][0]
    for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            lst = [list(row) for row in state]
            lst[x][y], lst[nx][ny] = lst[nx][ny], lst[x][y]
            yield tuple(tuple(row) for row in lst)
def solve(start):
    queue = [(h(start), 0, start, [])]
    seen = set()
    while queue:
        _, cost, state, path = heapq.heappop(queue)
        if state == goal:
            return path + [state]
        if state in seen:
            continue
        seen.add(state)
        for n in neighbors(state):
            heapq.heappush(queue, (cost + 1 + h(n), cost + 1, n, path + [state]))
start = ((1,2,3),(4,0,6),(7,5,8))
solution = solve(start)
for step in solution:
    for row in step:
        print(row)
    print()
