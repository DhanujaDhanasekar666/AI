import heapq
def astar(start, goal, grid):
    H = lambda a, b: abs(a[0]-b[0]) + abs(a[1]-b[1])
    open = [(H(start, goal), 0, start, [start])]
    seen = set()
    while open:
        f, g, curr, path = heapq.heappop(open)
        if curr == goal: return path
        if curr in seen: continue
        seen.add(curr)
        for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]:
            nx, ny = curr[0]+dx, curr[1]+dy
            if 0<=nx<len(grid) and 0<=ny<len(grid[0]) and grid[nx][ny]==0:
                heapq.heappush(open, (g+1+H((nx,ny),goal), g+1, (nx,ny), path+[(nx,ny)]))

grid = [
    [0,0,0,0],
    [1,1,0,1],
    [0,0,0,0],
    [0,1,1,0]
]
path = astar((0,0), (3,3), grid)
print(path)
