def alphabeta(node, depth, alpha, beta, maximizingPlayer, tree):
    if isinstance(tree[node], int) or depth == 0:
        return tree[node]
    if maximizingPlayer:
        maxEval = float('-inf')
        for child in tree[node]:
            eval = alphabeta(child, depth - 1, alpha, beta, False, tree)
            maxEval = max(maxEval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break  # Beta cut-off
        return maxEval
    else:
        minEval = float('inf')
        for child in tree[node]:
            eval = alphabeta(child, depth - 1, alpha, beta, True, tree)
            minEval = min(minEval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break  # Alpha cut-off
        return minEval
game_tree = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F', 'G'],
    'D': 3,
    'E': 5,
    'F': 2,
    'G': 9
}
result = alphabeta('A', 3, float('-inf'), float('inf'), True, game_tree)
print("Alpha-Beta Pruned Minimax Value:", result)
